Apex Testing

1.Get Started with Apex Unit Tests
VerifyDate Class
public class VerifyDate {
  
  //method to handle potential checks against two dates
  public static Date CheckDates(Date date1, Date date2) {
    //if date2 is within the next 30 days of date1, use date2.  Otherwise use the end of the month
    if(DateWithin30Days(date1,date2)) {
      return date2;
    } else {
      return SetEndOfMonthDate(date1);
    }
  }
  
  //method to check if date2 is within the next 30 days of date1
  private static Boolean DateWithin30Days(Date date1, Date date2) {
    //check for date2 being in the past
          if( date2 < date1) { return false; }
        
          //check that date2 is within (>=) 30 days of date1
          Date date30Days = date1.addDays(30); //create a date 30 days away from date1
    if( date2 >= date30Days ) { return false; }
    else { return true; }
  }

  //method to return the end of the month of a given date
  private static Date SetEndOfMonthDate(Date date1) {
    Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
    Date lastDay = Date.newInstance(date1.year(), date1.month(), totalDays);
    return lastDay;
  }

}
 
TestVerifyDate Class
@IsTest
public class TestVerifyDate {
    
    @isTest static void date2within30daydate1() {
        Date returnDate1 = VerifyDate.CheckDates(date.valueOf('2022-06-14'),date.valueOf('2022-06-24'));
        System.assertEquals(date.valueOf('2022-06-24'), returnDate1);
    }
    @isTest static void date2NOTwithin30daydate1() {
        Date returnDate2 = VerifyDate.CheckDates(date.valueOf('2022-06-14'),date.valueOf('2022-07-24'));
        System.assertEquals(date.valueOf('2022-06-29'), returnDate2);
    }
}
2.Test Apex Triggers
 
RestrictContactByName Trigger
trigger RestrictContactByName on Contact (before insert, before update) {
  
  //check contacts prior to insert or update for invalid data
  For (Contact c : Trigger.New) {
    if(c.LastName == 'INVALIDNAME') {  //invalidname is invalid
      c.AddError('The Last Name "'+c.LastName+'" is not allowed for DML');
    }

  }

}
 
TestRestrictContactByName TestClass
@IsTest
public class TestRestrictContactByName {
    @IsTest static void createBadContact(){
        
        Contact c = new Contact(FirstName = 'John', LastName = 'INVALIDNAME');
        
        Test.startTest();
        Database.SaveResult result = Database.insert(c, false);
        Test.stopTest();
        
        System.assert(!result.isSuccess());
    }

}
 
3.Create Test Data for Apex Tests
RandomContactFactory Class
public class RandomContactFactory {
    
    public static List<Contact> generateRandomContacts(Integer num,String lastname){
        List<Contact> contactList = new List<Contact>();
        for(Integer i = 1;i<=num;i++){
            Contact ct = new Contact(FirstName = 'Test'+i,LastName =lastName);
            contactList.add(ct);
        }
        return contactList;
    }

}
